# -*- coding: utf-8 -*-
"""degreetofa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OpkIMeLXWhUVOox0cWeGPO3VS53LwtyQ
"""

import tensorflow as tf
tf.logging.set_verbosity(tf.logging.ERROR)
import numpy as np

celcius_q = np.array([-40,-10,0,8,15,22,38], dtype = float)
farenheit_a = np.array([-40,14,32,46,59,72,100], dtype = float)

for i,c in enumerate(celcius_q):
  print("{} degree celcius = {} degree farenheit".format(c,farenheit_a[i]))
  
  
#model with single layer   
l0 = tf.keras.layers.Dense(units = 1, input_shape = [1])
model = tf.keras.Sequential([l0])
model.compile(loss = 'mean_squared_error', optimizer = tf.keras.optimizers.Adam(0.1))
history = model.fit(celcius_q, farenheit_a, epochs=500, verbose=False)
print('these are l0 variables {}'.format(l0.get_weights()))
model.predict([100.0])


#plotting of data
import matplotlib.pyplot as plt
plt.xlabel('Epoch number')
plt.ylabel('Loss Magnitude')
plt.plot(history.history['loss'])

#model with multiple layer
l0 = tf.keras.layers.Dense(units = 4, input_shape = [1])
l1 = tf.keras.layers.Dense(units = 4)
l2 = tf.keras.layers.Dense(units = 1)
model = tf.keras.Sequential([l0,l1,l2])
model.compile(loss = 'mean_squared_error', optimizer = tf.keras.optimizers.Adam(0.1))
history = model.fit(celcius_q, farenheit_a, epochs=500, verbose=False)
model.predict([100.0])
plt.xlabel('Epoch number')
plt.ylabel('Loss Magnitude')
plt.plot(history.history['loss'])

model.predict([100.0])